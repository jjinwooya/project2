<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="itwillbs.p2c3.class_will.mapper.MyPageMapper">
	<update id="updateMemberImg">
		<!-- 이미지파일 업데이트 때문에 따로 파놓음. -->
		UPDATE MEMBER
		SET

		member_img = #{member_img}

		WHERE
		member_code =
		#{member_code}
	</update>

	<update id="updateMember">
		UPDATE MEMBER
		SET
		<if test="member_addr != null">
			<if test="member_addr != null and !member_addr.equals('')">
				member_addr = #{member_addr},
			</if>
		</if>

		<if test="member_pwd != null">
			<if test="member_pwd != null and !member_pwd.equals('')">
				member_pwd = #{member_pwd},
			</if>
		</if>
		<if test="member_pwd != null">
			<if test="member_pwd != null and !member_pwd.equals('')">
				member_nickname = #{member_nickname}
			</if>
		</if>

		WHERE
		member_code = #{member_code}
	</update>

	<select id="selectMemberReview">
		<!-- 회원이 작성한 모든 클래스 리뷰 조회 -->
		SELECT cr.class_review_code,
		cr.class_review_subject,
		cr.class_review_content,
		cr.class_review_date,
		cr.class_review_time,
		c.class_name,
		cr.class_review_rating,
		cr.review_reply_status
		FROM
		class_review cr
		LEFT JOIN class
		c ON cr.class_code = c.class_code
		WHERE
		cr.member_code = #{member_code}
		LIMIT #{startRow2}, #{listLimit2}
	</select>
	<select id="countReview">
		<!-- 페이징 처리 때문. -->
		SELECT COUNT(*)
		FROM class_review cr
		WHERE member_code = ${member_code}
	</select>

	<select id="selectReviewByCode">
		<!-- 회원이 작성한 특정 클래스 리뷰 조회 -->
		SELECT * FROM class_review
		WHERE class_review_code = #{review_code}
	</select>

	<update id="updateReview" parameterType="java.util.Map">
		<!-- 회원이 작성한 특정 클래스 리뷰 업데이트 -->
		UPDATE class_review
		SET class_review_subject = #{class_review_subject},
		class_review_content = #{class_review_content},
		class_review_rating =
		#{class_review_rating}
		WHERE class_review_code = #{class_review_code}
	</update>

	<delete id="deleteReview">
		<!-- 클래스 리뷰 삭제 -->
		DELETE FROM class_review
		WHERE class_review_code = #{class_review_code}

	</delete>

	<select id="countNickname">
		<!-- 회원 닉네임 중복확인 -->
		SELECT COUNT(*)
		FROM MEMBER
		WHERE member_nickname = #{member_nickname}
	</select>
	<update id="updateMemberNormal">
		<!-- 크리에이터 회원이 일반회원으로 이것만 되겠끔 바꿈 -->
		<!-- 일반 회원이 크리에이터로 이거 종민이가 구현해서 빼버림! -->
		UPDATE MEMBER
		SET member_type = 1
		WHERE member_type = 2
		AND member_code =
		#{member_code}
	</update>


	<select id="selectMember">
		<!-- 멤버코드 회원정보 데리고 오기 -->
		SELECT * FROM MEMBER
		WHERE member_code = ${member_code}

	</select>


	<select id="selectLike">
		<!-- 멤버코드 좋아요한 클래스 데리고 오기 -->
		SELECT
		c.class_name, c.class_location , c.class_price, lc.class_code,
		lc.member_code
		FROM class c
		JOIN like_class lc
		ON c.class_code =
		lc.class_code
		WHERE lc.member_code = ${member_code}
		ORDER BY
		c.class_code
		LIMIT #{startRow}, #{listLimit}
	</select>

	<select id="countLikes">
		<!-- 페이징 처리 때문. -->
		SELECT COUNT(*)
		FROM like_class
		WHERE member_code = #{member_code};
	</select>


	<select id="selectPossibleReview">
		<!-- 클래스 결제 및 날짜를 기준으로 등록가능한 리뷰 클래스 데리고 오기 -->
		<!-- 서브쿼리는 중복리뷰 작성방지를 위해 만듬. -->
		 <![CDATA[
		SELECT
		p.pay_code,
		p.pay_amount,
		DATE(p.pay_datetime) as pay_date,
		p.pay_type,
		p.pay_status,
		p.member_code,
		p.class_schedule_code,
		p.class_code,
		p.use_willpay,
		cs.class_schedule_code,
		cs.class_code,
		cs.class_schedule_date,
		cs.class_round,
		c.class_name,
		(SELECT COUNT(*) FROM class_review cr
     	WHERE cr.class_code = p.class_code
        AND cr.member_code = p.member_code
        AND cr.class_schedule_code = p.class_schedule_code) as review_count		
		FROM
		pay p
		JOIN
            class_schedule cs ON p.class_schedule_code = cs.class_schedule_code
        JOIN
            class c ON cs.class_code = c.class_code
		WHERE
		p.pay_status = 'paid'
		AND p.member_code =  ${member_code}
		AND cs.class_schedule_date < CURRENT_DATE
		ORDER BY cs.class_schedule_date ASC
		LIMIT #{startRow}, #{listLimit}
		 ]]>
	</select>

	<select id="countPoss">
		<!-- 페이징처리를 위해 필요 -->
		<![CDATA[
		   SELECT COUNT(*)
		   FROM pay p
		   JOIN class_schedule cs ON p.class_schedule_code = cs.class_schedule_code
		   WHERE p.pay_status = 'paid'
		   AND p.member_code = #{member_code}
		   AND cs.class_schedule_date < CURRENT_DATE
		   ]]>

	</select>

	<insert id="insertReview">
		<!-- 리뷰 등록 -->
		INSERT INTO class_review (
		class_review_subject,
		class_review_content,
		class_review_date,
		class_review_time,
		member_code,
		class_code,
		class_review_rating,
		review_reply_status,
		class_schedule_code
		)
		VALUES (
		#{class_review_subject},
		#{class_review_content},
		CURRENT_DATE,
		CURRENT_TIME,
		#{member_code},
		#{class_code},
		#{class_review_rating},
		'N',
		#{class_schedule_code}
		)

	</insert>

	<update id="MemberWithdraw">
		UPDATE MEMBER
		SET
		member_status = 2
		WHERE
		member_code =
		#{member_code}
	</update>

	<select id="selectMemberMaster">
		<!-- 특정 회원이 수료한 클래스 숫자 월별로도 가능 -->
		 <![CDATA[
		SELECT
		DATE_FORMAT(cs.class_schedule_date, '%Y-%m') as month,
		COUNT(*) as class_count
		FROM
		pay p
		JOIN
		class_schedule cs ON p.class_schedule_code = cs.class_schedule_code
		WHERE
		p.pay_status = 'paid'
		AND p.member_code = ${member_code}
		AND cs.class_schedule_date < CURRENT_DATE
		GROUP BY
		DATE_FORMAT(cs.class_schedule_date, '%Y-%m')
		ORDER BY
		DATE_FORMAT(cs.class_schedule_date, '%Y-%m') ASC
		 ]]>
	</select>
	<select id="calDate">
		<!-- 특정 회원이 가입한지로 지난 시간 -->
		SELECT member_code, member_name, member_reg_date,
		DATEDIFF(NOW(), member_reg_date) AS days_since_registration
		FROM MEMBER
		WHERE member_code = #{member_code}
	</select>

	<select id="countMoney">
		<!-- 특정 회원이 사용한 금액 -->
		SELECT member_code, SUM(pay_amount + use_willpay) AS total_amount
		FROM pay
		WHERE member_code = #{member_code}
		GROUP BY member_code
	</select>
	<select id="findMoney">
		SELECT * FROM pay
		WHERE member_code = #{member_code}
		AND YEAR(pay_datetime) = #{year}
		AND MONTH(pay_datetime) = #{month}
	
	</select>



</mapper>