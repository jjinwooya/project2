<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="itwillbs.p2c3.class_will.mapper.PayMapper">
	<!-- === admin관련 sql === -->
	<select id="selectAdminToken">
		SELECT access_token
		FROM bank_user_info
		WHERE member_code = 1091
	</select>
	<insert id="insertAdminToken">
		INSERT INTO bank_user_info(
			access_token
			, user_seq_no
			, fintech_use_num
			, account_num
			, member_code
		) 
		VALUES (
			#{access_token}
			, null
			, null
			, null
			, 1091
		)
	</insert>
	<update id="updateAdminToken">
		UPDATE bank_user_info
		SET access_token = #{access_token}
		WHERE member_code = 1091
	</update>
	
	<!-- ======= pay 관련 sql ======== -->
	<!-- 임시 select -->
	<select id="selectClassInfo" resultType="map">
		SELECT c.class_name
			   , c.class_code
			   , c2.code_value AS 'class_upper' 
			   , c3.code_value AS 'class_lower'
			   , c.class_big_category
			   , c.class_small_category
			   , c.class_thumnail
			   , c.class_image
			   , c.class_image2
			   , c.class_image3
			   , c.class_location
			   , c.class_price
			   , c.common2_code
			   , c.class_ex
			   , c.class_creator_explain 
			   , c.member_code
			   , c.class_map_x
			   , c.class_map_y
			   , m.member_img
			   , m.member_nickname
		--	   , cs.class_schedule_date
		--	   , cs.class_st_time 
		-- 	   , cs.class_ed_time
		-- 	   , cs.class_round 
		FROM class c
		-- JOIN class_schedule cs 
		-- ON c.class_code = cs.class_code 
		JOIN common2 c2 
		ON c.class_big_category = c2.common2_code
		AND c2.common1_code = 'CLC'
		AND c2.common2_code = c.class_big_category
		JOIN common3 c3 
		ON c.class_small_category = c3.common3_code
		AND c3.common1_code = 'CLC'
		AND c3.common2_code = c.class_big_category 
		AND c3.common3_code = c.class_small_category
		JOIN MEMBER m
		ON m.member_code = c.member_code
		where c.class_code = #{class_code}
	</select>
	
	<select id="selectPayInfo" resultType="map">
		SELECT c.class_name
			   , c.class_code
			   , upper_code_value AS class_upper 
			   , lower_code_value AS class_lower
			   , c.class_thumnail
			   , c.class_location
			   , c.class_price
		 	   , m.member_code AS 'class_member_code'
		 	   , m.member_email 
		 	   , m.member_nickname 
		 	   , m.member_tel
		 	   , m.member_name
			   , cs.class_schedule_date
			   , cs.class_st_time 
		 	   , cs.class_ed_time
		 	   , cs.class_round
		 	   , cs.class_schedule_code
		 	   , (SELECT m.member_credit 
		 	   	  FROM MEMBER m 
		 	   	  WHERE m.member_code = #{member_code}) AS member_credit
		FROM class c
		JOIN class_schedule cs 
		ON c.class_code = cs.class_code 
		LEFT JOIN (
		    SELECT c2.code_value AS upper_code_value, c2.common2_code, c3.code_value AS lower_code_value, c3.common3_code
		    FROM common2 c2
		    LEFT JOIN common3 c3 
		    ON c2.common2_code = c3.common2_code
		    WHERE c2.common1_code = 'CLC'
		) AS combined_values
		ON c.class_big_category = combined_values.common2_code
		AND c.class_small_category = combined_values.common3_code
		JOIN MEMBER m
		ON c.member_code = m.member_code
		where c.class_code = #{class_code}
		AND cs.class_st_time = #{class_st_time}
		AND cs.class_ed_time = #{class_ed_time}
		AND cs.class_schedule_date = #{selected_dates}
		
	</select>
	
	<select id="selectMemberInfo" resultType="map">
		SELECT *
		FROM MEMBER
		WHERE member_code = #{member_code}
	</select>
	
	<select id="selectSchedule" resultType="map">
		SELECT *
		FROM class_schedule
		WHERE class_code = #{i}
	</select>
	
	<select id="selectScheduleTime" resultType="map">
		SELECT class_st_time
			   , class_ed_time
			   , class_remain_headcount
		FROM class_schedule
		WHERE class_schedule_date = #{date}
		AND class_code = #{class_code}
		ORDER BY class_round ASC
	</select>
	
	<select id="selectCredit" resultType="map">
		SELECT CASE WHEN member_credit IS NULL THEN '0' ELSE member_credit END AS 'member_credit'
		FROM MEMBER
		WHERE member_code = #{member_code}
	</select>
	
	<select id="selectObjects" resultType="map">
		SELECT
<!-- 			c.member_code -->
		    cs.class_schedule_code
		    , c.class_code
		FROM class c
		join class_schedule cs
		on c.class_code = cs.class_code
		and cs.class_code = #{class_code}
		and cs.class_st_time = #{class_st_time}
		and cs.class_ed_time = #{class_ed_time}
		and cs.class_schedule_date = #{class_schedule_date}
	</select>
	
	<update id="updateCredit">
		UPDATE MEMBER
		SET member_credit = member_credit - #{use_willpay}
		WHERE member_code = #{member_code}
	</update>
	
	<update id="updateHeadcount">
		UPDATE class_schedule
		SET class_remain_headcount = class_remain_headcount - #{pay_headcount}
		WHERE class_schedule_code = #{class_schedule_code}
	</update>
	
	<insert id="registPaySuccessInfo" useGeneratedKeys="true" keyProperty="pay_code">
		INSERT INTO pay(
			pay_code
		    , pay_merchant_uid
		    , pay_amount
		    , pay_datetime
		    , pay_type
		    , pay_status
		    , member_code
		    , class_schedule_code
		    , pay_headcount
		    , class_code
		    , imp_uid
		    , use_willpay
		    , pg_provider
		    , card_name
		)
		VALUES (
			null
		    <if test="merchant_uid != null">, #{merchant_uid}</if><if test="merchant_uid == null">, null</if>
		    , #{pay_amount}
		    , #{pay_datetime}
		    , #{pay_type}
		    , 'paid'
		    , #{member_code}
		    , #{class_schedule_code}
		    , #{pay_headcount}
		    , #{class_code}
		    <if test="imp_uid != null">, #{imp_uid}</if><if test="imp_uid == null">, null</if>
		    , #{use_willpay}
			<if test="pg_provider != null">, #{pg_provider}</if><if test="pg_provider == null">, null</if>
			<if test="card_name != null">, #{card_name}</if><if test="card_name == null">, null</if>
		)
	</insert>
	
	<select id="selectSuccessPayInfo" resultType="map">
		SELECT c.class_name
		   , c.class_thumnail
		   , c.class_image
		   , c.class_location
		   , c.class_price
		   , m.member_credit
		   , p.pay_amount
		   , p.pay_merchant_uid
		   , p.pay_headcount
		   , p.use_willpay
		   , p.pg_provider
		   , p.card_name
		   , p.pay_datetime
		   , c2tem.code_value AS 'pay_type'
		   , cs.class_st_time
		   , cs.class_ed_time
		   , cs.class_schedule_date
		   , c2.code_value AS 'upper_level'
		   , c3.code_value AS 'lower_level'
		   , CAST(FLOOR(c.class_price * p.pay_headcount) AS UNSIGNED) AS 'total_amount'
		   , CAST(FLOOR((c.class_price * p.pay_headcount) - p.use_willpay) AS UNSIGNED) AS 'result_amount'
		FROM pay p 
		JOIN class c 
		ON p.class_code = c.class_code
		JOIN MEMBER m
		ON p.member_code = m.member_code
		JOIN class_schedule cs 
		ON p.class_schedule_code = cs.class_schedule_code
		JOIN common2 c2 
		ON c.class_big_category = c2.common2_code
		AND c2.common1_code = 'CLC'
		JOIN common2 c2tem
		ON c2tem.common2_code = p.pay_type 
		AND c2tem.common1_code = 'PT'
		JOIN common3 c3 
		ON c.class_small_category = c3.common3_code 
		AND c3.common1_code = 'CLC'
		AND c3.common2_code = c.class_big_category 
		WHERE p.pay_code = #{pay_code};
	</select>
	
	<!-- ========금융결제원 관련 sql======== -->
	<insert id="registAccessToken">
		INSERT 
		INTO bank_user_info
		VALUES (
			#{access_token}
			, #{user_seq_no}
			, #{fintech_use_num}
			, #{account_num}
			, #{member_code}
		) 
	</insert>
	
	<select id="selectPackageInfoList" resultType="map">
		SELECT 
			reward_fee
			, reward_rate 
			, CAST(ROUND((reward_fee + (reward_fee * reward_rate / 100)), -1) AS SIGNED) AS 'reward_total'
		FROM reward 
		ORDER BY reward_fee
	</select>
	
	<update id="updateFintechUseNum">
		UPDATE bank_user_info
		SET fintech_use_num = COALESCE(fintech_use_num, #{fintech_use_num})
		WHERE access_token = #{access_token}
	</update>
	
	<!-- member_credit 업데이트 이후 조회  -->
	<update id="updateWillpay">
		UPDATE MEMBER
		SET member_credit = COALESCE(member_credit, 0) + #{member_credit}
		WHERE member_code = #{member_code}
	</update>
	<select id="selectWillpay" resultType="int">
		SELECT member_credit
		FROM MEMBER
		WHERE member_code = #{member_code}
	</select>
	
	<select id="selectPayInfoList" resultType="map">
	<![CDATA[
		SELECT c.class_name
		   , c.class_code
		   , cs.class_schedule_date
		   , cs.class_st_time
		   , cs.class_ed_time
		   , cs.class_schedule_code
		   , p.pg_provider
		   , p.card_name
		   , p.pay_amount
		   , p.use_willpay
		   , p.pay_headcount
		   , p.imp_uid
		   , p.pay_code
		   , p.member_code
		   , p.pay_datetime 
		   , p.pay_status
		   , p.pay_type
		   , upper_code_value AS 'class_upper'
		   , lower_code_value AS 'class_lower'
		   , m.member_name
		   ,CASE 
		       WHEN TIMESTAMPDIFF(MINUTE, p.pay_datetime , NOW()) < 1 THEN CONCAT(TIMESTAMPDIFF(SECOND, p.pay_datetime, NOW()), ' 초전')
		       WHEN TIMESTAMPDIFF(HOUR, p.pay_datetime, NOW()) < 1 THEN CONCAT(TIMESTAMPDIFF(MINUTE, p.pay_datetime, NOW()), ' 분전')
		       WHEN TIMESTAMPDIFF(HOUR, p.pay_datetime, NOW()) < 24 THEN CONCAT(TIMESTAMPDIFF(HOUR, p.pay_datetime, NOW()), ' 시간전')
		       ELSE CONCAT(TIMESTAMPDIFF(DAY, p.pay_datetime, NOW()), ' 일전')
	       END AS diff_date
	       , CASE
		       WHEN TIMESTAMPDIFF(HOUR, cs.class_schedule_date, NOW()) > 0 THEN '2' 
		       ELSE '1'
		   END AS refund_type
		FROM pay p
		JOIN class_schedule cs 
		ON p.class_schedule_code = cs.class_schedule_code 
		JOIN class c 
		ON c.class_code = p.class_code
		LEFT JOIN (
		    SELECT c2.code_value AS upper_code_value, c2.common2_code, c3.code_value AS lower_code_value, c3.common3_code
		    FROM common2 c2
		    LEFT JOIN common3 c3 
		    ON c2.common2_code = c3.common2_code
		    WHERE c2.common1_code = 'CLC'
		) AS combined_values
		ON c.class_big_category = combined_values.common2_code
		AND c.class_small_category = combined_values.common3_code
		JOIN MEMBER m
		ON p.member_code = m.member_code 
		WHERE p.member_code = #{member_code}
		ORDER BY p.pay_code DESC
	]]>
	</select>
	
	<!-- 환불금액 결정 -->
	<select id="selectRefundAmt" resultType="int">
	<![CDATA[
		SELECT 
			CASE WHEN TIMESTAMPDIFF(DAY, now(), cs.class_schedule_date) < 3 THEN FLOOR(ROUND((p.pay_amount / 2), -1)) 
				 ELSE p.pay_amount 
			END
		FROM pay p 
		JOIN class_schedule cs 
		ON p.class_schedule_code = cs.class_schedule_code
		WHERE p.pay_code = #{pay_code}; 
	]]>
	</select>
	
	<update id="updatePayStatus">
		UPDATE pay
		SET pay_status = 'canceled'
		WHERE pay_code = #{pay_code}
	</update>
	
	<update id="resetHeadcount">
		UPDATE class_schedule
		SET class_remain_headcount = class_remain_headcount + #{pay_headcount}
		WHERE class_schedule_code = #{class_schedule_code}
	</update>
	
	<!-- willpay 충전 성공 등록 -->
	<insert id="registWithdrawInfo" useGeneratedKeys="true" keyProperty="will_pay_code" >
		INSERT INTO will_pay
		VALUES (
			null
			, #{will_pay_date}
			, #{will_pay_amount}
			<choose>
				<when test="will_pay_get_pay == '' or will_pay_get_pay == null">
					, #{will_pay_amount}
				</when>
				<otherwise>
					, #{will_pay_get_pay}
				</otherwise>
			</choose>
			, #{will_pay_bank_name}
			, #{will_pay_account}
			, 'paid'
			, 2
			, #{member_code}
			, #{will_pay_chargeType}
		)
	</insert>
	
	<select id="selectWithdrawInfo" resultType="map">
		SELECT wp.will_pay_date
		   , wp.will_pay_amount
		   , wp.will_pay_get_pay
		   , wp.will_pay_bank_name
		   , m.member_credit
	FROM will_pay wp
	JOIN MEMBER m
	ON wp.member_code = m.member_code
	WHERE will_pay_code = #{will_pay_code}
	</select>
	
	<select id="selectWillpayChargeList" resultType="map">
		<![CDATA[
		SELECT wp.will_pay_code
			   , wp.will_pay_date
			   , wp.will_pay_amount
			   , wp.will_pay_get_pay
			   , wp.will_pay_bank_name
			   , wp.will_pay_account
			   , wp.will_pay_chargeType
			   , c2.code_value AS pay_type
			   , wp.member_code
			   , m.member_credit
			   ,CASE 
			       WHEN TIMESTAMPDIFF(MINUTE, wp.will_pay_date , NOW()) < 1 THEN CONCAT(TIMESTAMPDIFF(SECOND, wp.will_pay_date, NOW()), ' 초전')
			       WHEN TIMESTAMPDIFF(HOUR, wp.will_pay_date, NOW()) < 1 THEN CONCAT(TIMESTAMPDIFF(MINUTE, wp.will_pay_date, NOW()), ' 분전')
			       WHEN TIMESTAMPDIFF(HOUR, wp.will_pay_date, NOW()) < 24 THEN CONCAT(TIMESTAMPDIFF(HOUR, wp.will_pay_date, NOW()), ' 시간전')
			       ELSE CONCAT(TIMESTAMPDIFF(DAY, wp.will_pay_date, NOW()), ' 일전')
		       END AS diff_date
		FROM will_pay wp
		JOIN common2 c2
		ON wp.will_pay_type = c2.common2_code
		AND c2.common1_code = 'PT'
		JOIN MEMBER m
		ON m.member_code = wp.member_code
		WHERE wp.member_code = #{member_code}
		ORDER BY will_pay_code DESC
		]]>
	</select>
	
	
	<select id="selectAbledWillpay" resultType="int">
		SELECT m.member_credit - bonus_willpay.willpay AS abled_willpay
		FROM MEMBER m
		LEFT JOIN (
			SELECT SUM(wp.will_pay_get_pay - wp.will_pay_amount) AS willpay
				   , wp.member_code 
			FROM will_pay wp
			WHERE wp.member_code = #{member_code}
			GROUP BY wp.member_code
		) AS bonus_willpay
		ON m.member_code = bonus_willpay.member_code
		WHERE m.member_code = #{member_code}
	</select>
	
	
	
</mapper>