<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="itwillbs.p2c3.class_will.mapper.ClassMapper">
	<!-- 큰 카테고리 -->
	<select id="selectBigCategoryList">
		SELECT *
		FROM common2
		WHERE common1_code = 'CLC' AND code_hide = 'N'
	</select>
	
	<!-- 소 카테고리 -->
	<select id="selectSmallCategory" resultType="map">
		SELECT *
		FROM common3
		WHERE common1_code = 'CLC' AND common2_code = #{big_category} AND code_hide = 'N'
	</select>
	
	<!-- 카테고리 지역 -->
	<select id="selectCategoryLocal" resultType="map">
		SELECT *
		FROM common2
		WHERE common1_code = 'LC' AND code_hide = 'N'
	</select>
	
	<!-- 해시태그 -->
	<select id="selectHashtag" resultType="map">
		SELECT *
		FROM hash_tag
	</select>
	
	<select id="selectFilterClass" resultType="map">
		SELECT 
			class_code,
			class_name,
			c2.code_value AS class_big_category,
			c3.code_value AS class_small_category,
			c2.common2_code,
			c3.common3_code,
			class_thumnail,
			class_image,
			class_location,
			class_map_x,
			class_map_y,
			class_hashtag,
			class_creator_explain,
			class_hide,
			class_price,
			crs.code_value AS class_regist_status,
			m.member_name
		FROM class c
		LEFT JOIN common1 c1 ON c.class_big_category = c1.common1_code
		LEFT JOIN common2 c2 ON c.class_big_category = c2.common2_code AND c2.common1_code = 'CLC'
		LEFT JOIN common3 c3 ON c.class_small_category = c3.common3_code AND c3.common2_code = c2.common2_code AND c3.common1_code = 'CLC'
		LEFT JOIN common2 crs ON c.class_regist_status = crs.common2_code AND crs.common1_code = 'CRS'
		JOIN MEMBER m ON c.member_code = m.member_code
		WHERE c.class_active = 'Y'
		AND c.class_regist_status = '2'
		<if test="bigCategories != null and bigCategories.size() > 0">
			AND c2.common2_code IN
			<foreach item="bigCategory" collection="bigCategories" open="(" separator="," close=")">
			    #{bigCategory}
			</foreach>
		</if>
		<if test="smallCategories != null and smallCategories.size() > 0">
			AND c3.common3_code IN
			<foreach item="smallCategory" collection="smallCategories" open="(" separator="," close=")">
			    #{smallCategory}
			</foreach>
		</if>
		<if test="locals != null and locals.size() > 0">
			AND c2.common2_code IN
			<foreach item="local" collection="locals" open="(" separator="," close=")">
			    #{local}
			</foreach>
		</if>
	</select>
	
	<!-- 클래스 가격 순  -->
	<select id="selectPriceList" resultType="map">
		SELECT c.class_code
			,class_name
			,c2.code_value AS class_big_category
			,c3.code_value AS class_small_category
			,lc.code_value AS local_name
			,c2.common2_code
			,c3.common3_code
			,class_thumnail
			,class_hide
			,class_price
			,class_hashtag
			,m.member_name
			,m.member_nickname
		FROM class c
		LEFT JOIN common2 c2 ON c.class_big_category = c2.common2_code AND c2.common1_code = 'CLC'
		LEFT JOIN common2 lc ON c.common2_code = lc.common2_code AND lc.common1_code = 'LC'
		LEFT JOIN common2 crs ON c.class_regist_status = crs.common2_code AND crs.common1_code = 'CRS'
		LEFT JOIN common3 c3 ON c.class_small_category = c3.common3_code AND c3.common2_code = c2.common2_code AND c3.common1_code = 'CLC'
		JOIN MEMBER m ON c.member_code = m.member_code
		WHERE c.class_regist_status = 2 AND c.class_active = 'Y'
		ORDER BY 
		<if test="classListSelect == 'lowPrice'">
		  CAST(c.class_price AS UNSIGNED) ASC
		</if>
		<if test="classListSelect == 'highPrice'">
		  CAST(c.class_price AS UNSIGNED) DESC
		</if>
	</select>
	
	<!-- 리뷰 많은 순 -->
	<select id="selectReviewCount" resultType="map">
		SELECT c.class_code,
			c.class_name,
			c2.code_value AS class_big_category,
			c3.code_value AS class_small_category,
			lc.code_value AS local_name,
			c2.common2_code,
			c3.common3_code,
			c.class_thumnail,
			c.class_hide,
			c.class_price,
			c.class_hashtag,
			m.member_name,
			m.member_nickname,
			COALESCE(cr.review_count, 0) AS review_count
		FROM class c
		LEFT JOIN common2 c2 ON c.class_big_category = c2.common2_code AND c2.common1_code = 'CLC'
		LEFT JOIN common2 lc ON c.common2_code = lc.common2_code AND lc.common1_code = 'LC'
		LEFT JOIN common2 crs ON c.class_regist_status = crs.common2_code AND crs.common1_code = 'CRS'
		LEFT JOIN common3 c3 ON c.class_small_category = c3.common3_code AND c3.common2_code = c2.common2_code AND c3.common1_code = 'CLC'
		JOIN MEMBER m ON c.member_code = m.member_code
		LEFT JOIN (
			SELECT class_code, COUNT(class_review_code) AS review_count
			FROM class_review
			GROUP BY class_code
		) cr ON c.class_code = cr.class_code
		WHERE c.class_regist_status = 2 AND c.class_active = 'Y'
		ORDER BY review_count DESC
	</select>
	
	<!-- 리뷰 별점 순 정렬 -->
	<select id="selectStarList">
		SELECT 
		    IFNULL(AVG(cr.class_review_rating), 0) AS avg_rating,
		    c.class_code
		FROM class c
		LEFT JOIN class_review cr ON cr.class_code = c.class_code
		WHERE c.class_regist_status = '2'
		GROUP BY c.class_code
		ORDER BY avg_rating DESC
	</select>
	
	<!-- 클래스 좋아요 추가 -->
	<insert id="insertLikeClass" parameterType="java.util.Map" >
		INSERT INTO like_class(member_code, class_code)
		VALUES(
			#{member_code}, #{class_code}
		)
	</insert>
	
	<!-- 클래스 좋아요 리스트 -->
	<select id="selectLikeClassList">
		SELECT *
		FROM like_class
		WHERE member_code = #{member_code}
	</select>
	
	<!-- 클래스 좋아요 취소 -->
	<delete id="deleteLikeClass">
		DELETE FROM like_class 
		WHERE member_code = #{member_code} AND class_code = #{class_code}
	</delete>
	
	<!-- 클래스 좋아요 -->
	<select id="selectLikeClassCode" resultType="map">
		SELECT class_code
		FROM like_class
		WHERE member_code = #{member_code} 
	</select>
	
	<!-- 소 카테고리 -->
	<select id="selectListSmallCategory" resultType="map">
		SELECT *
		FROM common3
		WHERE common1_code = 'CLC'AND code_hide = 'N'
	</select>
	
	<!-- 클래스 리스트 -->
	<select id="selectClassList" resultType="map" parameterType="map">
		SELECT c.class_code
			,class_name
			,c2.code_value AS class_big_category
			,c3.code_value AS class_small_category
			,lc.code_value AS local_name
			,c2.common2_code
			,c3.common3_code
			,class_thumnail
			,class_image
			,class_ex
			,class_location
			,class_creator_explain
			,class_hide
			,class_price
			,class_map_x
			,class_map_y
			,class_hashtag
			,m.member_name
			,m.member_nickname
		FROM class c
		LEFT JOIN common2 c2 ON c.class_big_category = c2.common2_code AND c2.common1_code = 'CLC'
		LEFT JOIN common2 lc ON c.common2_code = lc.common2_code AND lc.common1_code = 'LC'
		LEFT JOIN common2 crs ON c.class_regist_status = crs.common2_code AND crs.common1_code = 'CRS'
		LEFT JOIN common3 c3 ON c.class_small_category = c3.common3_code AND c3.common2_code = c2.common2_code AND c3.common1_code = 'CLC'
		JOIN MEMBER m ON c.member_code = m.member_code
	    <where>
				c.class_regist_status = 2 AND c.class_active = 'Y'
			<if test="big_category != null and !big_category.isEmpty()">
				AND c2.common2_code = #{big_category}
	        </if>
			<if test="small_category != null and !small_category.isEmpty()">
				AND c3.common3_code = #{small_category}
			</if>
	        <if test="local != null and !local.isEmpty()">
				AND c.common2_code = #{local}
	        </if>
	        <if test="hashtag != null and !hashtag.isEmpty()">
				AND c.class_hashtag LIKE CONCAT('%', #{hashtag}, '%')
	        </if>
	        <if test="class_codes != null and !class_codes.isEmpty()">
				AND c.class_code IN
            <foreach item="classCode" collection="class_codes" open="(" separator="," close=")">
                #{classCode}
            </foreach>
            ORDER BY FIELD(c.class_code,
            <foreach item="classCode" collection="class_codes" separator=",">
                #{classCode}
            </foreach>)
	        </if>
		</where>
	</select>

	<!-- 클래스 리뷰 -->
	<select id="selectClassReview" resultType="map">
		SELECT class_review_subject
			, class_review_content
			, class_review_date
			, class_review_rating
			, member_name
			, member_nickname
			, m.member_code
		FROM class_review cr
		JOIN MEMBER m
		ON m.member_code = cr.member_code 
		JOIN class c 
		ON cr.class_code  = c.class_code 
		WHERE c.class_regist_status = '2'
		AND cr.class_code = #{class_code} 
	</select>
	
	<!-- 클래스 질문 -->
	<select id="selectClassInquiry" resultType="map">
		SELECT class_inquiry_subject
			, class_inquiry_content
			, class_inquiry_date
			, member_name
			, member_nickname
			, m.member_code
		FROM class_inquiry ci
		JOIN MEMBER m
		ON m.member_code = ci.member_code 
		JOIN class c
		ON ci.class_code = c.class_code 
		WHERE c.class_regist_status = '2'
		AND ci.class_code = #{class_code}
	</select>
	
	<!-- 클래스 커리큘럼 -->
	<select id="selectClassCurri" resultType="map">
		SELECT
			curri_round,
			curri_content
		FROM
			curri
		WHERE 
			class_code = #{class_code}
	</select>
	
	<!-- 클래스 해시태그 -->
	<select id="selectClassHashtag" resultType="map">
		SELECT class_code
			, class_hashtag
		FROM class
		WHERE class_code = #{class_code}
	</select>
	
	<!-- 클래스 신고 -->
	<insert id="insertClassComplain" parameterType="map">
		INSERT INTO class_report
		(class_report_code, class_report_big_category, class_report_small_category, class_report_content, class_report_status, class_code, member_code)
		VALUES
		(null, #{big_category}, #{small_category}, #{content}, '처리중', #{class_code}, #{member_code})
	</insert>
</mapper>
	